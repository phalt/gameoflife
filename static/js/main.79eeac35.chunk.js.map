{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["gilders","gun","setupGrid","seed","newGrid","initialCells","forEach","coord","r","c","range","count","Array","from","x","i","between","min","max","step","cells","newState","_","cellRow","cellColumn","aliveCount","isAlive","row","column","process","App","useState","cellState","setCellState","loop","setLoopState","useEffect","timer","setTimeout","clearTimeout","className","onClick","res","class","map","rowIndex","columnIndex","slice","randomNoise","Math","floor","random","href","rel","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79eeac35.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// VARIOUS DEFAULT STATES\n\nconst gilders = [\n  // occilator\n  [0, 1],\n  [1, 1],\n  [2, 1],\n  // Glider\n  [3, 4],\n  [4, 5],\n  [5, 5],\n  [5, 4],\n  [5, 3]\n];\n\nconst gun = [\n  [2, 25],\n  [3, 25],\n  [3, 23],\n  [4, 35],\n  [4, 36],\n  [4, 13],\n  [4, 14],\n  [4, 21],\n  [4, 22],\n  [5, 35],\n  [5, 36],\n  [5, 21],\n  [5, 22],\n  [6, 1],\n  [6, 2],\n  [5, 12],\n  [5, 16],\n  [7, 1],\n  [7, 2],\n  [6, 21],\n  [6, 22],\n  [6, 17],\n  [6, 11],\n  [7, 11],\n  [7, 17],\n  [7, 18],\n  [7, 15],\n  [7, 23],\n  [8, 11],\n  [8, 17],\n  [7, 25],\n  [8, 25],\n  [9, 12],\n  [9, 16],\n  [10, 13],\n  [10, 14]\n];\n\nconst setupGrid = seed => {\n  const newGrid = initialCells();\n  seed.forEach(coord => {\n    const [r, c] = coord;\n    newGrid[r][c] = 1;\n  });\n  return newGrid;\n};\n\nconst range = count => Array.from(new Array(count), (x, i) => 0);\n// 50 x 50 grid\nconst initialCells = () =>\n  Array.from(new Array(50), () => Array.from(new Array(50), () => 0));\n\nconst between = (x, min, max) => x >= min && x <= max;\n\nconst process = (cells, cellRow, cellColumn) => {\n  let aliveCount = 0;\n  const isAlive = cells[cellRow][cellColumn];\n  const coords = [\n    [cellRow - 1, cellColumn - 1],\n    [cellRow - 1, cellColumn],\n    [cellRow - 1, cellColumn + 1],\n    [cellRow, cellColumn - 1],\n    [cellRow, cellColumn + 1],\n    [cellRow + 1, cellColumn - 1],\n    [cellRow + 1, cellColumn],\n    [cellRow + 1, cellColumn + 1]\n  ];\n  coords.forEach(coord => {\n    const [row, column] = coord;\n    if (between(row, 0, 49) && between(column, 0, 49)) {\n      aliveCount += cells[row][column];\n    }\n  });\n  if (!isAlive && aliveCount === 3) {\n    // cell becomes alive\n    return 1;\n  }\n  if (isAlive && between(aliveCount, 2, 3)) {\n    // Stays alive\n    return 1;\n  }\n  // Otherwise dies\n  return 0;\n};\n\nconst step = cells => {\n  const newState = initialCells();\n  newState.forEach((_, r) => {\n    _.forEach((_, c) => {\n      newState[r][c] = process(cells, r, c);\n    });\n  });\n  return newState;\n};\n\nfunction App() {\n  const [cellState, setCellState] = useState(setupGrid(gun));\n  const [loop, setLoopState] = useState(false);\n\n  useEffect(() => {\n    if (loop) {\n      const timer = setTimeout(() => {\n        setCellState(step(cellState));\n      }, 250);\n      return () => clearTimeout(timer);\n    }\n  }, [cellState, loop]);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Paul's game of life</header>\n      <main className=\"main\">\n        <div className=\"btns\">\n          <h4>Controls</h4>\n          <button\n            onClick={() => {\n              const res = step(cellState);\n              setCellState(res);\n            }}\n          >\n            step\n          </button>\n          <button\n            onClick={() => {\n              setLoopState(!loop);\n            }}\n          >\n            {!loop ? \"loop\" : \"stop\"}\n          </button>\n          <button\n            onClick={() => {\n              setCellState(initialCells());\n            }}\n          >\n            reset\n          </button>\n          <h5>Scroll to the bottom to load some presets</h5>\n        </div>\n        <div class=\"border\">\n          {range(50).map((_, rowIndex) => {\n            return (\n              <div className=\"row\">\n                {range(50).map((_, columnIndex) => {\n                  const isAlive = cellState[rowIndex][columnIndex] === 1;\n                  return (\n                    <div\n                      onClick={() => {\n                        cellState[rowIndex][columnIndex] = isAlive ? 0 : 1;\n                        setCellState(cellState.slice());\n                      }}\n                      className={`column ${isAlive ? \"alive\" : \"dead\"}`}\n                    >\n                      &nbsp;\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"btns\">\n          <h4>Presets</h4>\n          <button\n            onClick={() => {\n              setCellState(setupGrid(gilders));\n            }}\n          >\n            A Glider and an occilator\n          </button>\n          <button\n            onClick={() => {\n              setCellState(setupGrid(gun));\n            }}\n          >\n            A Glider gun (seriously cool)\n          </button>\n          <button\n            onClick={() => {\n              const randomNoise = Array.from(new Array(50), () =>\n                Array.from(new Array(50), () =>\n                  Math.floor(Math.random() * Math.floor(2))\n                )\n              );\n              setCellState(randomNoise);\n            }}\n          >\n            Random stuff\n          </button>\n        </div>\n      </main>\n      <footer className=\"App-header\">\n        <p>\n          Made by{\" \"}\n          <a\n            className=\"App-link\"\n            href=\"https://phalt.github.io\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Paul Hallett\n          </a>{\" \"}\n          just for fun ya know.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}